<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.9.0">Jekyll</generator><link href="https://jyseok85.github.io/feed.xml" rel="self" type="application/atom+xml" /><link href="https://jyseok85.github.io/" rel="alternate" type="text/html" /><updated>2023-04-18T02:07:50+00:00</updated><id>https://jyseok85.github.io/feed.xml</id><title type="html">Dev-History</title><subtitle>지식을 잃어버리지 않게 기록하기 위한 블로그</subtitle><entry><title type="html">Opentelemetry Tempo Springboot</title><link href="https://jyseok85.github.io/openTelemetry-tempo-springboot" rel="alternate" type="text/html" title="Opentelemetry Tempo Springboot" /><published>2023-04-17T00:00:00+00:00</published><updated>2023-04-17T00:00:00+00:00</updated><id>https://jyseok85.github.io/openTelemetry-tempo-springboot</id><content type="html" xml:base="https://jyseok85.github.io/openTelemetry-tempo-springboot">&lt;h2 id=&quot;vscode를-활용한-springboot-환경에서-테스트-진행&quot;&gt;vscode를 활용한 springboot 환경에서 테스트 진행&lt;/h2&gt;
&lt;hr /&gt;
&lt;h3 id=&quot;1-vscode-확장-프로그램을-설치합니다&quot;&gt;1. vscode 확장 프로그램을 설치합니다.&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;Spring Boot Extension Pack
(확장 설치 후에 jdk 까지 설치 합니다. )&lt;/li&gt;
  &lt;li&gt;Extension Pack for Java&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;Images/sprintbootjava.png&quot; alt=&quot;Alt text&quot; /&gt;&lt;/p&gt;

&lt;p&gt;JDK가 설치되어 있지 않을 경우 아래의 창이 열리며, 다운받아 설치 합니다. 
&lt;img src=&quot;Images/jdk-install.png&quot; alt=&quot;Alt text&quot; /&gt;&lt;/p&gt;

&lt;hr /&gt;
&lt;h3 id=&quot;2-기본-프로젝트-생성&quot;&gt;2. 기본 프로젝트 생성&lt;/h3&gt;
&lt;p&gt;gradle 환경의 프로젝트를 생성하기 위해 아래 확장 설치&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;Images/extension-gradle-for-java.png&quot; alt=&quot;Alt text&quot; /&gt;&lt;/p&gt;

&lt;p&gt;F1 키를 눌러서 스프링 프로젝트 생성을 시작합니다. 
&lt;img src=&quot;Images/K-011.png&quot; alt=&quot;Alt text&quot; /&gt;
&lt;img src=&quot;Images/K-012.png&quot; alt=&quot;Alt text&quot; /&gt;
&lt;img src=&quot;Images/K-013.png&quot; alt=&quot;Alt text&quot; /&gt;
&lt;img src=&quot;Images/K-014.png&quot; alt=&quot;Alt text&quot; /&gt;
&lt;img src=&quot;Images/K-015.png&quot; alt=&quot;Alt text&quot; /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;img src=&quot;Images/K-016.png&quot; alt=&quot;Alt text&quot; /&gt;
&lt;img src=&quot;Images/K-017.png&quot; alt=&quot;Alt text&quot; /&gt;
&lt;img src=&quot;Images/K-018.png&quot; alt=&quot;Alt text&quot; /&gt;&lt;/p&gt;

&lt;hr /&gt;
&lt;h3 id=&quot;3-swagger-추가&quot;&gt;3. Swagger 추가&lt;/h3&gt;

&lt;p&gt;API 테스트를 위하여 Swagger 프레임워크를 추가합니다.&lt;/p&gt;

&lt;p&gt;소스수정내역&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;ExampleController.java 추가 후 아래 코드 입력&lt;/li&gt;
&lt;/ol&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;package&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;com.example.demo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;io.swagger.v3.oas.annotations.Hidden&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;io.swagger.v3.oas.annotations.Parameter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;io.swagger.v3.oas.annotations.tags.Tag&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;org.springframework.web.bind.annotation.GetMapping&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;org.springframework.web.bind.annotation.RequestMapping&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;org.springframework.web.bind.annotation.RequestParam&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;org.springframework.web.bind.annotation.RestController&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;nd&quot;&gt;@Tag&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;예제 API&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;description&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Swagger 테스트용 API&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nd&quot;&gt;@RestController&lt;/span&gt;
&lt;span class=&quot;nd&quot;&gt;@RequestMapping&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;/&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ExampleController&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// @Operation(summary = &quot;문자열 반복&quot;, description = &quot;파라미터로 받은 문자열을 2번 반복합니다.&quot;)&lt;/span&gt;
    &lt;span class=&quot;nd&quot;&gt;@Parameter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;str&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;description&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;2번 반복할 문자열&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;nd&quot;&gt;@GetMapping&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;/returnStr&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;returnStr&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nd&quot;&gt;@RequestParam&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;str&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;str&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;str&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;\n&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;str&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;nd&quot;&gt;@GetMapping&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;/example&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;example&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;예시 API&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;nd&quot;&gt;@Hidden&lt;/span&gt;
    &lt;span class=&quot;nd&quot;&gt;@GetMapping&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;/ignore&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;ignore&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;무시되는 API&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ol&gt;
  &lt;li&gt;application.properties 수정 (따로 추가하지 않아도 사용가능)
    &lt;div class=&quot;language-properties highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;py&quot;&gt;springdoc.packages-to-scan&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;com.example.demo&lt;/span&gt;
&lt;span class=&quot;py&quot;&gt;springdoc.default-consumes-media-type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;application/json;charset=UTF-8&lt;/span&gt;
&lt;span class=&quot;py&quot;&gt;springdoc.default-produces-media-type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;application/json;charset=UTF-8&lt;/span&gt;
&lt;span class=&quot;py&quot;&gt;springdoc.swagger-ui.path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;/&lt;/span&gt;
&lt;span class=&quot;py&quot;&gt;springdoc.swagger-ui.disable-swagger-default-url&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;true&lt;/span&gt;
&lt;span class=&quot;py&quot;&gt;springdoc.swagger-ui.display-request-duration&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;true&lt;/span&gt;
&lt;span class=&quot;py&quot;&gt;springdoc.swagger-ui.operations-sorter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;alphaapplication&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;build.gradle 에 의존성추가.
    &lt;div class=&quot;language-gradle highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;dependencies&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
 &lt;span class=&quot;c1&quot;&gt;//springdoc 의존성추가.&lt;/span&gt;
 &lt;span class=&quot;n&quot;&gt;implementation&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.0.2'&lt;/span&gt; 
 &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
    &lt;p&gt;수정하는 내역은 아래 형광색으로 표시했습니다.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;img src=&quot;Images/gradle-swagger-springdoc-project-tree.png&quot; alt=&quot;Alt text&quot; /&gt;&lt;/p&gt;

&lt;p&gt;이후 gradle extention 에서&lt;/p&gt;

&lt;p&gt;Tasks -&amp;gt; application -&amp;gt; bootRun 으로 실행 후 
브라우저를 실행하여 localhost:8080 으로 정상동작을 확인합니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;Images/K-019.png&quot; alt=&quot;Alt text&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;b&gt;※ 앞으로 서버로 실행가능한 jar 파일을 만들기 위해서는 Tasks -&amp;gt; build -&amp;gt; bootJar으로 빌드 합니다. &lt;/b&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;Images/gradle-extension-tree.png&quot; alt=&quot;Alt text&quot; /&gt;&lt;/p&gt;

&lt;hr /&gt;
&lt;h3 id=&quot;4-opentelemetry를-통한-grafana-tempo-자동계측-추가&quot;&gt;4. opentelemetry를 통한 Grafana Tempo 자동계측 추가&lt;/h3&gt;

&lt;ol&gt;
  &lt;li&gt;OpenTelemetry Instrumentation for Java 다운로드
    &lt;ul&gt;
      &lt;li&gt;깃허브 페이지 : https://github.com/open-telemetry/opentelemetry-java-instrumentation&lt;/li&gt;
      &lt;li&gt;다운로드 파일 : https://github.com/open-telemetry/opentelemetry-java-instrumentation/releases&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;자바 옵션으로 다운받은 opentelemetry-javaagent-all.jar 파일 추가
    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; JAVA_OPTS=-javaagent:/opentelemetry-javaagent-all.jar
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;시스템 환경 속성 추가&lt;/p&gt;

    &lt;p&gt;윈도우 : 시스템 속성 -&amp;gt; 고급탭 -&amp;gt; 환경변수&lt;/p&gt;

    &lt;p&gt;&lt;img src=&quot;Images/K-020.png&quot; alt=&quot;Alt text&quot; /&gt;&lt;/p&gt;

    &lt;p&gt;리눅스 : /etc/profile&lt;/p&gt;
    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; export OTEL_EXPORTER=otlp_span
 export OTEL_EXPORTER_OTLP_ENDPOINT=https://localhost:4317
 export OTEL_EXPORTER_OTLP_INSECURE=true
 export OTEL_RESOURCE_ATTRIBUTES=service.name=SomeName
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
    &lt;p&gt;java의 경우 사전에 환경변수등록을 하지 않을 경우 JAVA_OPTS 로 변경 불가능&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;자바옵션에 환경설정 내용까지 포함하여 스프링서버 실행
    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; JAVA_OPTS= -javaagent:/opentelemetry-javaagent-all.jar 
 -Dotel.exporter.otlp.endpoint=http://domain:4317
 -Dotel.resource.attributes=service.name=test
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;java의 경우 닷넷과 다르게 환경변수와 옵션으로 opentelemetry 에이전트를 추가해주면 자동계층이 가능해 집니다.&lt;/p&gt;</content><author><name></name></author><summary type="html">vscode를 활용한 springboot 환경에서 테스트 진행 1. vscode 확장 프로그램을 설치합니다.</summary></entry><entry><title type="html">Tempo Test</title><link href="https://jyseok85.github.io/tempo-test" rel="alternate" type="text/html" title="Tempo Test" /><published>2023-04-16T00:00:00+00:00</published><updated>2023-04-16T00:00:00+00:00</updated><id>https://jyseok85.github.io/tempo-test</id><content type="html" xml:base="https://jyseok85.github.io/tempo-test">&lt;p&gt;처음에 만들었던 .Net 프로젝트를 실행합니다.(디버깅으로 실행해도 상관없습니다)
&lt;img src=&quot;Images/K-001.png&quot; alt=&quot;Alt text&quot; /&gt;
기존처럼 동일하게 WeatherForecast 를 실행합니다.&lt;/p&gt;

&lt;p&gt;기존엔 콘솔창으로 확인했지만, 템포 및 그라파나를 설치했기 때문에 그라파나에서 확인을 합니다. 
http://localhost:3000/ 기본 아이디 비번 admin,admin&lt;/p&gt;

&lt;p&gt;좌측하단 설정 -&amp;gt; Configration 클릭&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;Images/K-006.png&quot; alt=&quot;Alt text&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Tempo -&amp;gt; Explore 클릭
&lt;img src=&quot;Images/K-007.png&quot; alt=&quot;Alt text&quot; /&gt;&lt;/p&gt;

&lt;p&gt;우측 상단 Run Query(파란색아이콘) 클릭
&lt;img src=&quot;Images/K-005.png&quot; alt=&quot;Alt text&quot; /&gt;&lt;/p&gt;

&lt;p&gt;방금 요청한 API에 대한 트레이스가 나옵니다.&lt;/p&gt;

&lt;p&gt;템포와 그라파나를 거쳐오기 때문에 실시간 반영이 되지 않습니다.&lt;/p&gt;

&lt;p&gt;검색된 Trace ID를 클릭하면 상세 정보를 볼수 있습니다. 그러나 별 의미없는 단순 호출정보라서 (뭐 어쩌라고??) 생각됩니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;Images/K-008.png&quot; alt=&quot;Alt text&quot; /&gt;&lt;/p&gt;

&lt;p&gt;참고로 현재 구축한 Trace 시스템은 아래와 같은 구성으로 동작됩니다. 
&lt;img src=&quot;Images/%EA%B5%AC%EC%84%B1%EB%8F%84.png&quot; alt=&quot;Alt text&quot; /&gt;&lt;/p&gt;

&lt;p&gt;단순한 API가 아니라. 실제 운영되는 서버처럼 복잡한 로직을 갖도록 프로젝트를 수정하겠습니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;Images/%EC%84%9C%EB%B2%84API%EA%B5%AC%EC%84%B1%EB%8F%84.png&quot; alt=&quot;Alt text&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;외부 API는 비동기로 호출하며 나머지 내부 API는 전부 동기로 호출합니다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;내부에서 한번더 내부 API를 호출하도록 하고&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;마지막 API는 오래걸리는 작업처럼 Delay를 추가합니다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;그리고 기존에 있었던 실제 WeatherForecast 로직을 그냥 둡니다.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;새로운 빈 Controller를 생성하고, 아래의 코드를 붙여넣기 합니다.&lt;/p&gt;

&lt;div class=&quot;language-c# highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;using&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Microsoft.AspNetCore.Mvc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;namespace&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;TempoSample2.Controllers&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ApiController&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Route&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;[controller]&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)]&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Child1Controller&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ControllerBase&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;HttpGet&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Name&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Child1&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)]&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;child 1&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ApiController&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Route&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;[controller]&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)]&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Child2Controller&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ControllerBase&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;HttpGet&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Name&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Child2&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)]&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Task&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;using&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;client&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;HttpClient&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;uriBuilder&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;UriBuilder&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Scheme&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Host&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Host&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Host&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Port&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;??&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Child21&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;Console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;WriteLine&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;uriBuilder&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Uri&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
                &lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;  &lt;span class=&quot;k&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;client&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;GetStringAsync&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;uriBuilder&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Uri&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;using&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;client&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;HttpClient&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;uriBuilder&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;UriBuilder&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Scheme&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Host&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Host&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Host&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Port&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;??&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Child22&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;Console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;WriteLine&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;uriBuilder&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Uri&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
                &lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;client&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;GetStringAsync&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;uriBuilder&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Uri&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;OK&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ApiController&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Route&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;[controller]&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)]&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Child21Controller&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ControllerBase&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;

        &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;HttpGet&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Name&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Child21&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)]&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Task&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;  
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;child 21&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ApiController&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Route&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;[controller]&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)]&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Child22Controller&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ControllerBase&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;

        &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;HttpGet&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Name&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Child22&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)]&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Task&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;child 22&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ApiController&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Route&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;[controller]&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)]&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Child3Controller&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ControllerBase&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;

        &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;HttpGet&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Name&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Child3&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)]&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Task&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Task&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Delay&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;1000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;child 3&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;



    &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ApiController&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Route&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;[controller]&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)]&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;OtherController&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ControllerBase&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;HttpGet&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Name&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;GetW&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)]&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Task&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;using&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;client&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;HttpClient&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
            &lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;client&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;GetStringAsync&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;http://webcode.me&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;WeatherForecast 의 Get 메서드를 아래와 같이 수정합니다.&lt;/p&gt;

&lt;div class=&quot;language-c# highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;HttpGet&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Name&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;GetWeatherForecast&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)]&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Task&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;IEnumerable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;WeatherForecast&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;Task&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tasks&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;otherclient&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;HttpClient&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;otehruriBuilder&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;UriBuilder&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Scheme&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Host&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Host&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Host&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Port&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;??&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Other&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;tasks&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;otherclient&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;GetStringAsync&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;otehruriBuilder&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Uri&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;using&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;client&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;HttpClient&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;uriBuilder&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;UriBuilder&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Scheme&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Host&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Host&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Host&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Port&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;??&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Child1&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;client&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;GetAsync&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;uriBuilder&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Uri&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;using&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;client&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;HttpClient&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;uriBuilder&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;UriBuilder&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Scheme&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Host&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Host&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Host&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Port&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;??&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Child2&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;client&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;GetStringAsync&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;uriBuilder&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Uri&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;using&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;client&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;HttpClient&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;uriBuilder&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;UriBuilder&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Scheme&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Host&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Host&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Host&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Port&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;??&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Child3&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;client&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;GetStringAsync&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;uriBuilder&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Uri&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tasks&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Enumerable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Range&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Select&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;index&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;WeatherForecast&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;Date&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DateOnly&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;FromDateTime&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;DateTime&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Now&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;AddDays&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)),&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;TemperatureC&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Random&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Shared&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Next&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(-&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;20&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;55&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;Summary&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Summaries&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Random&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Shared&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Next&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Summaries&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Length&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)]&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;ToArray&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;실행하면 Swagger UI에 새로 생긴 api가 추가되었을텐데. 기존처럼 Weatherforecast api를 호출합니다.&lt;/p&gt;

&lt;p&gt;그라파나로 들어가서 마지막에 호출된 TraceID를 클릭하면 우리가 추가한 API가 연속적으로 호출되며 제대로된 Trace 화면을 볼 수 있습니다. 
&lt;img src=&quot;Images/K-009.png&quot; alt=&quot;Alt text&quot; /&gt;
전체 호출에 1.11s가 걸렸으며&lt;/p&gt;

&lt;p&gt;외부 Api는 499.23ms 가 걸렸지만 비동기로 호출되어서 전체 시간에 영향은 없고,&lt;/p&gt;

&lt;p&gt;Child3 이 1초 대기를 두어서 1.01s&lt;/p&gt;</content><author><name></name></author><summary type="html">처음에 만들었던 .Net 프로젝트를 실행합니다.(디버깅으로 실행해도 상관없습니다) 기존처럼 동일하게 WeatherForecast 를 실행합니다.</summary></entry><entry><title type="html">Opentelemetry Tempo Net</title><link href="https://jyseok85.github.io/openTelemetry-tempo-net" rel="alternate" type="text/html" title="Opentelemetry Tempo Net" /><published>2023-04-15T00:00:00+00:00</published><updated>2023-04-15T00:00:00+00:00</updated><id>https://jyseok85.github.io/openTelemetry-tempo-net</id><content type="html" xml:base="https://jyseok85.github.io/openTelemetry-tempo-net">&lt;p&gt;개발환경 vs2022 .Net7 Win11&lt;/p&gt;

&lt;p&gt;목표 : 
.Net 웹 서버의 Trace을 OpenTelemetry로 내보내기&lt;/p&gt;

&lt;h2 id=&quot;1-기본적인-콘솔창으로-trace-내보내기&quot;&gt;1. 기본적인 콘솔창으로 Trace 내보내기&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;ASP .Net Core 웹 API&lt;/strong&gt; 프로젝트를 생성합니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;Images/createproject.png&quot; alt=&quot;Alt text&quot; /&gt;&lt;img src=&quot;Images/createproject2.png&quot; alt=&quot;Alt text&quot; /&gt;&lt;/p&gt;

&lt;p&gt;누겟 패키지 설치&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;OpenTelemetry.Extensions.Hosting 1.4.0
OpenTelemetry.Instrumentation.AspNetCore 1.0.0-rc9.14
OpenTelemetry.Exporter.Console 1.4.0
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;Images/nuget.png&quot; alt=&quot;Alt text&quot; /&gt;&lt;/p&gt;

&lt;p&gt;program.cs 에 다음 코드를 삽입합니다.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-C#&quot;&gt;builder.Services.AddOpenTelemetry()
        //추적사용
        .WithTracing(builder =&amp;gt; builder
        //현재 분석하는 서비스를 example-app로 명명
        .SetResourceBuilder(ResourceBuilder.CreateDefault().AddService(&quot;example-app&quot;))
        //기본 AspNet 작업 포함
        .AddAspNetCoreInstrumentation()
        //콘솔로 내보내기
        .AddConsoleExporter());
&lt;/code&gt;&lt;/pre&gt;
&lt;details&gt;
&lt;summary&gt;정상 동작 확인하기&lt;/summary&gt;

1. 프로젝트를 실행합니다. 
2. 서버가 실행된 콘솔창과 웹 브라우저가 열립니다. 
3. Swegger 웹에서 기본적으로 생성된 Get Method를 실행합니다. 
4. 등록한 example-app 이 콘솔창에 service.name 으로 출력됩니다. 
![Alt text](Images/K-001.png)![Alt text](Images/K-002.png)
&lt;/details&gt;

&lt;h4 id=&quot;이것만-보면-잘-알수-없지만-어쨌든-제대로-trace가-되어-출력되고-있습니다&quot;&gt;이것만 보면 잘 알수 없지만, 어쨌든 제대로 Trace가 되어 출력되고 있습니다.&lt;/h4&gt;

&lt;h2 id=&quot;2-grpc로-내보내기-추가&quot;&gt;2. Grpc로 내보내기 추가&lt;/h2&gt;

&lt;p&gt;누겟 패키지 설치&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;OpenTelemetry.Exporter.OpenTelemetryProtocol 1.4.0
Grpc.Core 2.46.6
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;program.cs 에 다음 코드를 삽입합니다.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-C#&quot;&gt;builder.Services.AddOpenTelemetry()
        //추적사용
        .WithTracing(builder =&amp;gt; builder
        //현재 분석하는 서비스를 example-app로 명명
        .SetResourceBuilder(ResourceBuilder.CreateDefault().AddService(&quot;example-app&quot;))
        //기본 AspNet 작업 포함
        .AddAspNetCoreInstrumentation()
        //콘솔로 내보내기
        .AddConsoleExporter()
        //OpenTelementry 로 내보내기
        .AddOtlpExporter(opt =&amp;gt;
                    {
                        //도커사용시 서비스이름을 호스트이름오로 사용가능합니다. 
                        opt.Endpoint = new Uri(&quot;http://127.0.0.1:4317&quot;);
                        opt.Protocol = OpenTelemetry.Exporter.OtlpExportProtocol.Grpc;
                    }));
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;위와같이 구성한 경우 트레이스로 수집한된 데이터가 Endpoint로 전송이 됩니다.&lt;/p&gt;

&lt;p&gt;저 EndPoint가 Tempo의 Grpc 포트와 매칭되면 자동으로 수집된 데이터가 템포로 들어가게 됩니다.&lt;/p&gt;</content><author><name></name></author><summary type="html">개발환경 vs2022 .Net7 Win11</summary></entry><entry><title type="html">1. 템포, 그라파나, 프로메테우스 설치하기</title><link href="https://jyseok85.github.io/tempo-grafana-promethues" rel="alternate" type="text/html" title="1. 템포, 그라파나, 프로메테우스 설치하기" /><published>2023-04-14T09:00:00+00:00</published><updated>2023-04-14T09:00:00+00:00</updated><id>https://jyseok85.github.io/tempo-grafana-promethues</id><content type="html" xml:base="https://jyseok85.github.io/tempo-grafana-promethues">&lt;p&gt;&lt;span class=&quot;table-of-contents-list&quot;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;ul class=&quot;table-fo-contents-list&quot;&gt;
    &lt;b&gt;목차&lt;/b&gt;
    &lt;!-- href 링크는 날짜를 제외한 파일명과 매칭됨 --&gt;
    &lt;!-- ex) 파일명이 2023-04-13-grafana.md -&gt; &lt;a href=&quot;./grafana&quot;&gt;  --&gt;
    &lt;li&gt;&lt;a href=&quot;./tempo-grafana-promethues&quot;&gt; 1. 템포, 그라파나, 프로메테우스 설치하기&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;./openTelemetry-tempo-net&quot;&gt; 2. DotNet에서 OpenTelemetry를 이용한 템포 전송 프로젝트 생성&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;./tempo-test&quot;&gt; 3. Tempo 전송 테스트&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;./openTelemetry-tempo-springboot&quot;&gt; 4. Java(springboot) 환경에서 Tempo 전송&lt;/a&gt;&lt;/li&gt;
    &lt;hr style=&quot;border: solid 1px rgb(134, 134, 134);&quot; /&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;템포-그라파나-프로메테우스-설치하기&quot;&gt;템포, 그라파나, 프로메테우스 설치하기&lt;/h2&gt;
&lt;hr /&gt;
&lt;p&gt;템포 구성 샘플소스 : https://github.com/grafana/tempo.git&lt;/p&gt;
&lt;blockquote&gt;
  &lt;ul&gt;
    &lt;li&gt;&lt;a href=&quot;https://github.com/grafana/tempo/blob/main/example/docker-compose/local/docker-compose.yaml&quot;&gt;docker-compose.yaml&lt;/a&gt;&lt;br /&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;https://github.com/grafana/tempo/blob/main/example/docker-compose/shared/grafana-datasources.yaml&quot;&gt;grafana.yaml&lt;/a&gt;&lt;br /&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;https://github.com/grafana/tempo/blob/main/example/docker-compose/shared/prometheus.yaml&quot;&gt;prometheus.yaml&lt;/a&gt;&lt;br /&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;https://github.com/grafana/tempo/blob/main/example/docker-compose/shared/tempo.yaml&quot;&gt;tempo.yaml&lt;/a&gt;&lt;/li&gt;
  &lt;/ul&gt;
&lt;/blockquote&gt;

&lt;p&gt;위 샘플은 도커 컴포즈를 통해서 그라파나, 프로메테우스, 템포를 설치합니다.&lt;/p&gt;

&lt;p&gt;위 깃을 받고 그대로 사용할수 있지만,&lt;/p&gt;

&lt;p&gt;딱 필요한 파일만 사용하고 싶다면 아래의 docker-compose.yaml 내용을 복사하고 아래처럼 폴더구조를 생성하여 작업합니다.(상대경로의 변경과 k6 모듈만 제거되었습니다.)&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;├─docker-compose.yaml
├─shared
│   ├─ grafana-datasources.yaml
│   ├─ prometheus.yaml
│   └─ tempo.yaml
└─ tempo-data
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;hr /&gt;
&lt;summary&gt;docker-compose.yaml&lt;/summary&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;version: &quot;3&quot;
services:

  tempo:
    image: grafana/tempo:latest                     #다운받을 이지미
    container_name : tempo                          #생성될 컨테이너 이름
    command: [ &quot;-config.file=/etc/tempo.yaml&quot; ]
    volumes:                                        #볼륨 지정
      - ./shared/tempo.yaml:/etc/tempo.yaml
      - ./tempo-data:/tmp/tempo
    ports:                                          #포트 지정
      - &quot;14268:14268&quot;  # jaeger ingest
      - &quot;3200:3200&quot;   # tempo
      - &quot;4317:4317&quot;  # otlp grpc                    #이전에 만든 닷넷 서버와 통신
      - &quot;4318:4318&quot;  # otlp http
      - &quot;9411:9411&quot;   # zipkin

  prometheus:
    image: prom/prometheus:latest
    container_name : tempo_prometheus
    command:
      - --config.file=/etc/prometheus.yaml
      - --web.enable-remote-write-receiver
      - --enable-feature=exemplar-storage
    volumes:
      - ./shared/prometheus.yaml:/etc/prometheus.yaml
    ports:
      - &quot;9090:9090&quot;

  grafana:
    image: grafana/grafana:9.4.3
    container_name: tempo_grafana
    volumes:
      - ./shared/grafana-datasources.yaml:/etc/grafana/provisioning/datasources/datasources.yaml
    environment:
      - GF_AUTH_ANONYMOUS_ENABLED=true
      - GF_AUTH_ANONYMOUS_ORG_ROLE=Admin
      - GF_AUTH_DISABLE_LOGIN_FORM=true
      - GF_FEATURE_TOGGLES_ENABLE=traceqlEditor
    ports:
      - &quot;3000:3000&quot;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;hr /&gt;
&lt;summary&gt;각 제품별 yaml 파일(원본이 변경될것을 대비해서)&lt;/summary&gt;

&lt;ul&gt;
  &lt;li&gt;grafana-datasource.yaml&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;apiVersion: 1

datasources:
- name: Prometheus
  type: prometheus
  uid: prometheus
  access: proxy
  orgId: 1
  url: http://prometheus:9090
  basicAuth: false
  isDefault: false
  version: 1
  editable: false
  jsonData:
    httpMethod: GET
- name: Tempo
  type: tempo
  access: proxy
  orgId: 1
  url: http://tempo:3200
  basicAuth: false
  isDefault: true
  version: 1
  editable: false
  apiVersion: 1
  uid: tempo
  jsonData:
    httpMethod: GET
    serviceMap:
      datasourceUid: prometheus
      
traces:
  configs:
    - name: default
      service_graphs:
        enabled: true
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;prometheus.yaml&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;global:
  scrape_interval:     15s
  evaluation_interval: 15s

scrape_configs:
  - job_name: 'prometheus'
    static_configs:
      - targets: [ 'localhost:9090' ]
  - job_name: 'tempo'
    static_configs:
      - targets: [ 'tempo:3200' ]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;tempo.yaml&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;server:
  http_listen_port: 3200

distributor:
  receivers:                           # this configuration will listen on all ports and protocols that tempo is capable of.
    jaeger:                            # the receives all come from the OpenTelemetry collector.  more configuration information can
      protocols:                       # be found there: https://github.com/open-telemetry/opentelemetry-collector/tree/main/receiver
        thrift_http:                   #
        grpc:                          # for a production deployment you should only enable the receivers you need!
        thrift_binary:
        thrift_compact:
    zipkin:
    otlp:
      protocols:
        http:
        grpc:
    opencensus:

ingester:
  max_block_duration: 5m               # cut the headblock when this much time passes.
compactor:
  compaction:
    block_retention: 1h                # overall Tempo trace retention. set for demo purposes

metrics_generator:
  registry:
    external_labels:
      source: tempo
      cluster: docker-compose
  storage:
    path: /tmp/tempo/generator/wal
    remote_write:
      - url: http://prometheus:9090/api/v1/write
        send_exemplars: true

storage:
  trace:
    backend: local                     # backend configuration to use
    wal:
      path: /tmp/tempo/wal             # where to store the the wal locally
    local:
      path: /tmp/tempo/blocks

overrides:
  metrics_generator_processors: [service-graphs, span-metrics] # enables metrics generator
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Command 창에서 해당 경로로 이동 후 docker-compose up -d 명령으로 컨테이너들을 실행합니다.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;docker-compose up -d

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;Images/K-003.png&quot; alt=&quot;Alt text&quot; /&gt;&lt;/p&gt;

&lt;p&gt;도커 데스크탑에 아래와 같이 3개의  컨테이너가 실행됩니다. 
&lt;img src=&quot;Images/K-004.png&quot; alt=&quot;Alt text&quot; /&gt;&lt;/p&gt;

&lt;p&gt;닷넷 프로젝트를 컨테이너로 포함시키지 않은 이유&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;Swagger가 개발모드에서만 동작됩니다. 물론 환경변수를 Development로 주면 실행이 됩니다.(ASPNETCORE_ENVIRONMENT=Development)&lt;/li&gt;
  &lt;li&gt;테스트로 작성할 코드가 서버내부에서 내부 api를 호출하는데, 호출 위치가 컨테이너 내부라서 네트워크 연결하기가 번거롭습니다. (외부 경로나 다른 컨테이너를 호출하면 상관없습니다.)&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;이 두가지 이유로 닷넷 서버는 로컬에서 실행시켰습니다.&lt;/p&gt;</content><author><name>YeonSeok Jo</name></author><category term="monitoring" /><summary type="html">목차 1. 템포, 그라파나, 프로메테우스 설치하기 2. DotNet에서 OpenTelemetry를 이용한 템포 전송 프로젝트 생성 3. Tempo 전송 테스트 4. Java(springboot) 환경에서 Tempo 전송</summary></entry><entry><title type="html">.Net5 -&amp;gt; .Net7 Migration</title><link href="https://jyseok85.github.io/Net7Migration" rel="alternate" type="text/html" title=".Net5 -&amp;gt; .Net7 Migration" /><published>2022-11-17T11:00:00+00:00</published><updated>2022-11-17T11:00:00+00:00</updated><id>https://jyseok85.github.io/Net7Migration</id><content type="html" xml:base="https://jyseok85.github.io/Net7Migration">&lt;p&gt;특별히 변경된 사항은 거의 없습니다. 
App.razor의 초반 선언이 조금 바뀌고, 단순 Loading 텍스트대신 프로그래스바가 추가되었습니다. 
.Net5에서 프로젝트 속성에서 단순히 .Net7으로 변경하기만 하면 동작됩니다.&lt;/p&gt;

&lt;p&gt;단순 프레임워크만 올랐는데 속도도 빨라졌습니다.&lt;/p&gt;

&lt;p&gt;5에서 6까지 1초 걸리던게 0.8초
6에서 7까지 0.8초 걸리던게 0.6초&lt;/p&gt;

&lt;p&gt;한번에 2단계를 건너뛰었기 때문에 거의 2배 빨라졌다고 보는게 좋습니다. 
거의 서버와 동일한 속도까지 빨라졌습니다.(서버의 경우 매페이지 다운로드 해야기 때문에 
실제 계산은 빨라도 다운로드가 완료되는 시간이 포함되어서 엇 비슷합니다.)&lt;/p&gt;

&lt;p&gt;그런데 말입니다. 
.net6 부터 AOT 가 나왔습니다. 물론 저는 6를 건너뛰었고, 원래 첫버전은 망작이라서 시도도 안해봤었는데
이걸 사용하니까 속도가 거의 윈도우 클라이언트속도가 나옵니다.. WASM이요..&lt;/p&gt;

&lt;p&gt;단점은 다운받아야 하는 프레임워크가 3배이상 뻥튀기 됩니다. 기존에 30메가 중반대였는데
AOT로 빌드하니 100메가이상이 됩니다.&lt;/p&gt;

&lt;p&gt;물론 웹브라우저는 캐싱이 되니까 두번째 접속시에는 1~2메가 정도만 다운받습니다.&lt;/p&gt;

&lt;p&gt;단점은 사파리에서 지원이 안됩니다.. 
솔직히 IOS에서 인쇄 안되는 문제로 개발한건데.. 사파리가 아직이라니.&lt;/p&gt;</content><author><name>YeonSeok Jo</name></author><category term="blazor" /><summary type="html">특별히 변경된 사항은 거의 없습니다. App.razor의 초반 선언이 조금 바뀌고, 단순 Loading 텍스트대신 프로그래스바가 추가되었습니다. .Net5에서 프로젝트 속성에서 단순히 .Net7으로 변경하기만 하면 동작됩니다.</summary></entry><entry><title type="html">아무도 안알려주는 팁!</title><link href="https://jyseok85.github.io/Tip" rel="alternate" type="text/html" title="아무도 안알려주는 팁!" /><published>2022-11-03T09:00:00+00:00</published><updated>2022-11-03T09:00:00+00:00</updated><id>https://jyseok85.github.io/Tip</id><content type="html" xml:base="https://jyseok85.github.io/Tip">&lt;p&gt;&lt;span class=&quot;table-of-contents-list&quot;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;ul class=&quot;table-fo-contents-list&quot;&gt;
    &lt;b&gt;목차&lt;/b&gt;
    &lt;li&gt;&lt;a href=&quot;./Configuration&quot;&gt; 1. ML-Agents 환경구성(Windows)&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;./PlayTutorial&quot;&gt; 2. Play Tutorial&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;./What!&quot;&gt; 3. What should i do?&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;./Conculation&quot;&gt; 4.시작부터 결론??&lt;/a&gt;&lt;/li&gt;
    &lt;hr style=&quot;border: solid 1px rgb(134, 134, 134);&quot; /&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;1-writediscreteactionmask&quot;&gt;1. WriteDiscreteActionMask&lt;/h3&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;public override void WriteDiscreteActionMask(IDiscreteActionMask actionMask)
{
    //인덱스
    //액션
    //활서 비활성
    actionMask.SetActionEnabled(index, action, false);
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;액션마스크를 사용하면 에이전트가 학습할때 제약조건을 받아서 처리가 가능하다.
그러나 이것은 학습할때 사용하면 안된다. 해당 조건을 학습 못하기 때문이다.&lt;/p&gt;

&lt;p&gt;예를들어 벽이 랜덤 위치에 생성되는데, 코드상에서 벽이므로 갈수 없게 예외처리 한 경우
에이전트는 벽이 있어서 갈수 없다라고 학습하지 못한다.&lt;/p&gt;

&lt;p&gt;이건 학습이 완료된 이후에 에이전트의 행동을 제약걸때 사용한다.&lt;/p&gt;

&lt;h3 id=&quot;2-addreward--setreward&quot;&gt;2. AddReward &amp;amp; SetReward&lt;/h3&gt;

&lt;p&gt;목적지까지 이동하는 에이전트를 학습할때&lt;/p&gt;

&lt;p&gt;보통 최종보상을 획득할 경우 SetReward(1)로 설정하고,&lt;/p&gt;

&lt;p&gt;에이전트가 아무행동도 안하는것을 방지하기위해서 AddReward(-0.001f) 로 마이너스 보상을 주도록 만들수 있는데&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;이건 잘못된 생각이다&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;최종 보상이 1로 수렴될 경우 에이전트는 &lt;strong&gt;어떤 행동을 하던지 목적지에만 도달하면 된다&lt;/strong&gt;
라는 마인드로 학습을 하게 된다. 그러므로 최적의 경로를 찾지 못하고, 빙글빙글 돌다가 결국 시간내에 도달하기만 한다.&lt;/p&gt;

&lt;p&gt;SetReward는 중간보상이 없는 경우에 설정함이 맞는듯 하다.&lt;/p&gt;

&lt;p&gt;다른 코드들을 보면 보상을 고정수치가 아닌 currentStep / maxStep 으로 계산해서 보상을 주는 케이스도 있다.&lt;/p&gt;

&lt;h3 id=&quot;3-점진적-증가-학습&quot;&gt;3. 점진적 증가 학습&lt;/h3&gt;

&lt;p&gt;처음부터 큰 사이즈의 맵에서 학습을 하면 MaxStep도 늘려줘야하고, 학습시간도 늘어난다.&lt;/p&gt;

&lt;p&gt;중간에 Behavior Parameters 의 관찰대상을 변경하는 것만 조심하고, 작은 환경에서 학습시켜서 점점 큰 환경으로 학습이 가능하다.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;//이어하기
--resume
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;//특정 버전을 기본값으로 설정 후 진행
--initialize-from=이전run-id
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;버전별 관리를 하기 위해서 가능하면 –initialize-from 옵션을 사용하자.&lt;/p&gt;</content><author><name>YeonSeok Jo</name></author><category term="ml-agents" /><summary type="html">목차 1. ML-Agents 환경구성(Windows) 2. Play Tutorial 3. What should i do? 4.시작부터 결론??</summary></entry><entry><title type="html">Report WebViewer</title><link href="https://jyseok85.github.io/WebViewer" rel="alternate" type="text/html" title="Report WebViewer" /><published>2022-11-03T09:00:00+00:00</published><updated>2022-11-03T09:00:00+00:00</updated><id>https://jyseok85.github.io/WebViewer</id><content type="html" xml:base="https://jyseok85.github.io/WebViewer">&lt;p&gt;ERP가 웹으로 전환함에 있어서 ReportViewer또한 웹으로 표시해야 할 필요성이 생겼습니다.
(물론 꽤 오래전부터 이슈가 되었지만, 기술의 한계로 인하여 중단되었습니다.)&lt;/p&gt;

&lt;p&gt;기존 윈도우 클라이언트 버전에서 Web으로 전환하는데 여러 프레임워크를 테스트 했었습니다.
HTML5 Canvas, TypeScript, Unity, Blazor&lt;/p&gt;

&lt;p&gt;HTML5 Canvas의 경우 가장 기본이 되는 표준 프레임워크라서 제일먼저 시도했지만 
Canvas Drawing 의 경우 폰트에 따라서 글자에 깍두기 현상이 일어나서 기각되었습니다.&lt;/p&gt;

&lt;p&gt;그래서 TypeScript 로 구조를 잡고나서 실제 개발을 1~2달 정도 진행했을때 문제가 발견되었습니다. 기존 프로그램에는 동적으로 C# 코드를 실행을 해서 데이터를 후처리 하는 기능이 있는데 (JInt)TypeScript로는 불가능했습니다. JavaScript 정도만 실행가능하고, 실제 커스텀하게 만든 C#은 실행할 방법이 없었습니다.&lt;/p&gt;

&lt;p&gt;그 문제를 해결하기 위해 .Net 환경으로 해결할수 밖에 없었습니다. 
(기존 서식의 호환성을 포기할수가 없었기 때문에..)&lt;/p&gt;

&lt;p&gt;과거에 Unity로 UI를 만들던것을 경험삼아서 Unity로 한달정도 프로토타입을 만들어봤지만, 실제 인쇄를 하기 위해서 서버가 필요했기 때문에 이것도 기각되었습니다.&lt;/p&gt;

&lt;p&gt;그러던중 Blazor라는 것을 알게되었고, JInt 테스트를 해본결과 버전이 달라서 약간 지원되는 기능의 차이는 있었지만 허용범위내여서 이걸로 결정하고 개발을 진행했습니다.&lt;/p&gt;

&lt;p&gt;당시 개발 버전은 .Net Core3.1&lt;/p&gt;

&lt;p&gt;그리고 2020년 말에 .Net 5가 릴리즈 되고나서 마이그레이션을 했습니다.&lt;/p&gt;

&lt;p&gt;거의 90%정도의 호환성 유지하며 윈도우 프로그램에서 전환을 했지만 큰 문제가 있었습니다.&lt;/p&gt;

&lt;p&gt;WASM의 경우 너무 느려서 사용할수 없었습니다.
실제 렌더링하기 위해 데이터를 가공하는 시간도 느리긴했지만 가장 큰 문제는 .Net의 오브젝트를 렌더링 하기 위해 JavaScript로 변환하는 과정(Json전달)이 .Net Core3.1 버전 기준으로 1메가당 1초가 걸렸습니다.&lt;/p&gt;

&lt;p&gt;평범한 단순 표 서식의 경우 100kb 이내로 생성되지만 복잡한 법정서식의 경우 1메가이상되기 때문입니다.&lt;/p&gt;

&lt;p&gt;물론 1~2장은 아무 문제가 되지 않지만, ERP 시스템을 대상으로 하기 때문에 수백장을 한번에 출력할 경우를 생각해야 했습니다. 
500장 생각하면 데이터 넘기는데만 500초..가 걸립니다.&lt;/p&gt;

&lt;p&gt;물론 이건 프레임워크 버전이 업그레이드 됨에 따라서 점점 속도가 빨라졌습니다. 
(체감상 매 버전별 20%정도의 성능이 향상되는걸로 느껴졌습니다.)
().Net7 이 릴리즈 됨에 있어서 다시 프로젝트를 개선해야되겠다고 느낀게 이점 때문입니다. )&lt;/p&gt;

&lt;p&gt;그럼 결국 서버 모델로 가야했습니다.&lt;/p&gt;

&lt;p&gt;서버의 경우 기존 클라이언트 프로그램과 거의 차이가 없을 정도의 속도로 표현이 가능했습니다. 
단지 모든 계산이 서버에서 이뤄지기 때문에 수십, 수백명이 동시에 대량의 데이터를 출력할것을 예상해서 실제 업체에 구축되는 서버와 별개의 서버구축이 필요했습니다.&lt;/p&gt;

&lt;p&gt;서버 4대를 로드밸런싱 구성하고, 동시 접속 테스트 결과 몇십 몇백만이 호출되어도 WebViewer 서버의 경우는 느려지기만 하고 정상동작을 했습니다. 문제는 ERP서버가 너무 많은 API요청을 처리하지 못했습니다.&lt;/p&gt;

&lt;p&gt;안정성까지 확보를 했지만, 실제 업체에 서버한대가 더 추가된다는것에 대한 부담감? + URL 프로토콜을 사용하여 윈도우 버전으로 실행가능하기 때문에 2년간 구축한 사례는 없습니다.&lt;/p&gt;</content><author><name>YeonSeok Jo</name></author><category term="blazor" /><summary type="html">ERP가 웹으로 전환함에 있어서 ReportViewer또한 웹으로 표시해야 할 필요성이 생겼습니다. (물론 꽤 오래전부터 이슈가 되었지만, 기술의 한계로 인하여 중단되었습니다.)</summary></entry><entry><title type="html">4. 시작부터 결론?</title><link href="https://jyseok85.github.io/Conculation" rel="alternate" type="text/html" title="4. 시작부터 결론?" /><published>2022-10-24T09:00:00+00:00</published><updated>2022-10-24T09:00:00+00:00</updated><id>https://jyseok85.github.io/Conculation</id><content type="html" xml:base="https://jyseok85.github.io/Conculation">&lt;p&gt;&lt;span class=&quot;table-of-contents-list&quot;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;ul class=&quot;table-fo-contents-list&quot;&gt;
    &lt;b&gt;목차&lt;/b&gt;
    &lt;li&gt;&lt;a href=&quot;./Configuration&quot;&gt; 1. ML-Agents 환경구성(Windows)&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;./PlayTutorial&quot;&gt; 2. Play Tutorial&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;./What!&quot;&gt; 3. What should i do?&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;./Conculation&quot;&gt; 4.시작부터 결론??&lt;/a&gt;&lt;/li&gt;
    &lt;hr style=&quot;border: solid 1px rgb(134, 134, 134);&quot; /&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;결론부터-말씀드리자면-ml-agents로-개발을-중단-했습니다&quot;&gt;결론부터 말씀드리자면 ML-Agents로 개발을 중단 했습니다.&lt;/h3&gt;

&lt;p&gt;제가 중단을 결정하게 된 이유를 보시고 도움이 되셨으면 합니다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h4 id=&quot;중단을-하게-된-결정적-원인&quot;&gt;중단을 하게 된 결정적 원인!&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;학습이 생각처럼 원만한게 진행되지 않음.&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;해결을 가능해 보이지만 유의미한 결과를 내기 위해서 학습하는 기간이 너무 오래 걸림.&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;개발하다가 막히는 경우야 비일비재 하고 그걸 해결하는게 당연한데, 이 ML-Agents는 코드를 수정하고 학습시키는데 오랜 시간이 걸릴수 밖에 없습니다.&lt;/p&gt;

&lt;p&gt;물론 제가 게임의 AI를 전담해서 만드는 역활만 한다면 당연히 계속 했을 테지만, 혼자서 모든걸 개발해야하는 입장에서, 빠른 개발을 위해 전통적인 FSM로직을 사용해야겠다는 판단을 내려야했습니다.&lt;/p&gt;

&lt;p&gt;(기존에 잘 개발하다가 유튜브보고 혹해서 3주의 시간을 투자했습니다.)&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;–
&lt;strong&gt;제가 작업한 내용을 시간순대로 나열하면&lt;/strong&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;10 x 10 맵 생성후 agent가 target 이동&lt;/li&gt;
  &lt;li&gt;target , agent 위치 랜덤추가&lt;/li&gt;
  &lt;li&gt;15 x 15 맵 20 X 20 맵 등등 점점 사이즈를 증가하며 학습&lt;/li&gt;
  &lt;li&gt;벽 추가(맵의 10%수준) -&amp;gt; 기존 Vector 관찰로 학습이 어려움.
(raycast, grid, renderTexture 등등 사용 시도)&lt;/li&gt;
  &lt;li&gt;다른 사람이 만든 멋진 GridSensor 컴포넌트 사용 - &lt;a href=&quot;https://github.com/mbaske/grid-sensor&quot;&gt;깃허브 링크&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;벽이 있을 경우에도 정상적으로 학습됨 확인&lt;/li&gt;
  &lt;li&gt;실제 던전지형 생성 학습&lt;/li&gt;
  &lt;li&gt;사이즈를 증가시키며 학습 -작은 사이즈에서는 정상, 맵 사이즈가 늘어나니 길을 잘 못찾음.&lt;/li&gt;
  &lt;li&gt;원하는 조건의 AI를 만들기까지 오래걸린다고 판단되어 &lt;strong&gt;중단결정&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/mlagents/normal.gif&quot; style=&quot; display: initial; height : 200px&quot; /&gt;
&lt;img src=&quot;/assets/images/mlagents/fool.gif&quot; style=&quot;display: initial; height : 200px&quot; /&gt;&lt;/p&gt;

&lt;p&gt;중간까지 학습한거라서 최적의 경로로 이동하지 않지만, 맵 사이즈가 작을경우에는 좌측처럼 잘 찾습니다. 그러나 맵이 커질경우에는 가끔 AI가 멍청하게 행동할때가 있습니다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;학습이 제대로 안된거죠.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;이것은 결국 학습보상 결정에 대한 문제로 조금식 수정해 나가면 되지만, 여기서 문제점은 이런 미세조정을 하기위해서 학습할때마다 &lt;strong&gt;10~20분정도(AMD 5600)&lt;/strong&gt; 걸리게 된다는 점 입니다.
(에디터 내에서 25개 환경을 복제해서 사용. 100개까지 복제해봤지만 큰 시간 감소는 발견할수 없습니다.)&lt;/p&gt;

&lt;p&gt;만약 더 정확한 로직을 위해서 관찰대상을 추가할 경우에는 이어서 학습을 할수 없기 때문에 더 걸릴 수도 있구요. 
실제 코드 상으로는 몇줄 수정안했는데 이걸 테스트하기 위해서 걸리는 시간이 너무 오래 걸리니까, 개발 일정을 예상할 수 가 없었습니다.&lt;/p&gt;

&lt;h4 id=&quot;그럼-이-문제를학습시간동안-멍때리는-자신이-답답한문제-해결하기-위해서는-어떻게-해야할까요&quot;&gt;그럼 이 문제를(학습시간동안 멍때리는 자신이 답답한문제) 해결하기 위해서는 어떻게 해야할까요?&lt;/h4&gt;
&lt;ol&gt;
  &lt;li&gt;잘 이해하고, 이론적으로 확실한 보상체계를 확립한 상태에서 개발한다?? ;; ??&lt;/li&gt;
  &lt;li&gt;Unity 스크립트 컴파일처럼 단시간내에 일정 보상확률(최대 보상의 95%이상) 학습이 가능해야 한다.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;그리고 유니티에서 제공하는 학습시간을 단축시키기 위한 방법이 있습니다.&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;빌드 후 클라이언트를 동시에 여러개 실행해서 학습.&lt;/li&gt;
  &lt;li&gt;빌드 후 구글 클라우드를 통한 학습.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;전제조건이 있죠?? &lt;strong&gt;빌드….&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;에디터 모드에서 학습이 아닌 빌드 후 연동해서 학습.&lt;/p&gt;

&lt;p&gt;물론 전체 학습시간 대비 빌드시간은 얼마 안될 수 있지만, 느낌이 다르죠. 그리고 학습초기에 완전 망한거면 바로 다시 수정할때도 있는데, 이런경우는 너무 번거롭지 않을까요?&lt;/p&gt;

&lt;p&gt;분명히 에디터에서도 다중 시스템을 이용해서 학습하는게 가능할텐데 아직 지원이 되지 않습니다.&lt;/p&gt;

&lt;hr /&gt;
&lt;p&gt;&lt;strong&gt;넉두리를 하자면&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;제 생각엔, 아마도 다들 똑똑해서 필요없다고 생각하는듯 합니다. 일반적으로 배우는 사람이 저런 단순한 보상처리에서 고민할거라고 생각하지 않기 때문에, 그냥 학습 고도화를 하기 위해 오래 걸리는 시간만 단축시키기 위해 노력한거겠죠.&lt;/li&gt;
  &lt;li&gt;2.0 버전까지 왔으면서 왜 cmd 창에서 실행시켜야 하는지 모르겠네요. Editor 창에서도 충분히 가능할텐데..&lt;/li&gt;
  &lt;li&gt;설치왜 각각 시키는지도 모르겠어요. ml-agents Release 버전별로 파이썬 및 파이토치를 지원하는 버전이 따로 있는데 그냥 묶어서 실행파일 하나로 인스톨을 만들수 있을텐데요.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;제가 닷넷 클라개발자로만 살아서 UI 없는걸 싫어하기 때문에 이렇게 생각하는걸 수도 있겠습니다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h4 id=&quot;다음-포스트에서-중단하기-전까지-실제-구현방법에-대하여-정리하겠습니다&quot;&gt;다음 포스트에서 중단하기 전까지 실제 구현방법에 대하여 정리하겠습니다.&lt;/h4&gt;

&lt;h4 id=&quot;필요하시다면-보상을-조절해가며-그-이후를-이어서-하시면-됩니다&quot;&gt;필요하시다면 보상을 조절해가며 그 이후를 이어서 하시면 됩니다.&lt;/h4&gt;</content><author><name>YeonSeok Jo</name></author><category term="ml-agents" /><summary type="html">목차 1. ML-Agents 환경구성(Windows) 2. Play Tutorial 3. What should i do? 4.시작부터 결론??</summary></entry><entry><title type="html">2. Play Tutorial</title><link href="https://jyseok85.github.io/PlayTutorial" rel="alternate" type="text/html" title="2. Play Tutorial" /><published>2022-10-24T09:00:00+00:00</published><updated>2022-10-24T09:00:00+00:00</updated><id>https://jyseok85.github.io/PlayTutorial</id><content type="html" xml:base="https://jyseok85.github.io/PlayTutorial">&lt;p&gt;&lt;span class=&quot;table-of-contents-list&quot;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;ul class=&quot;table-fo-contents-list&quot;&gt;
    &lt;b&gt;목차&lt;/b&gt;
    &lt;li&gt;&lt;a href=&quot;./Configuration&quot;&gt; 1. ML-Agents 환경구성(Windows)&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;./PlayTutorial&quot;&gt; 2. Play Tutorial&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;./What!&quot;&gt; 3. What should i do?&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;./Conculation&quot;&gt; 4.시작부터 결론??&lt;/a&gt;&lt;/li&gt;
    &lt;hr style=&quot;border: solid 1px rgb(134, 134, 134);&quot; /&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;작업을-시작하기에-앞서서-정상적으로-기능이-실행되고-학습되는지-튜토리얼을-실행해서-테스트-하는것을-목표로-합니다&quot;&gt;작업을 시작하기에 앞서서 정상적으로 기능이 실행되고 학습되는지, 튜토리얼을 실행해서 테스트 하는것을 목표로 합니다.&lt;/h3&gt;

&lt;p&gt;&lt;br /&gt;
앞서 ML-Agents의 깃을 다운로드 받은 경로에서&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;./Project/Assets/ML-Agents/Examples/3DBall&lt;/li&gt;
  &lt;li&gt;./Project/Assets/ML-Agents/Examples/SharedAssets
두 폴더를 현재 프로젝트로 복사해 옵니다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;3D Ball 데모 씬을 로드한 후에 플레이 버튼을 눌러보면 공이 아래로 떨어지지 않게 중십을 잡고 있는 모습을 볼 수 있습니다. 
&lt;img src=&quot;/assets/images/mlagents/K-001.png&quot; style=&quot;margin-left: false; margin-right: auto; display: block;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;3DBall 프리팹 -&amp;gt; Agent GameObject -&amp;gt; Behavior Parameter Script-&amp;gt; Model 속성에 학습된 모델(3DBall-NNModel)이 적용되어 있어서 위와 같이 에이전트가 행동을 하게 됩니다. 
&lt;img src=&quot;/assets/images/mlagents/behaviorParameters.png&quot; style=&quot;margin-left: false; margin-right: auto; display: block;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;먄약, Model이 할당되지 않는다면 ml-agents 및 사용자 입력에 따라 학습을 하게 됩니다.&lt;/p&gt;

&lt;p&gt;현재는 ml-agents가 실행되어 있지 않기 때문에 사용자입력 만 적용됩니다. 
&lt;img src=&quot;/assets/images/mlagents/logic.png&quot; style=&quot;margin-left: false; margin-right: auto; display: block;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Cmd 창을 열고 프로젝트 경로로 이동한 후, 아래의 명령어를 입력하여 ml-agents 를 실행합니다.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;mlagents-learn config/ppo/3DBall.yaml --run-id=first
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/mlagents/mlagent-run.png&quot; style=&quot;margin-left: false; margin-right: auto; display: block;&quot; /&gt;&lt;/p&gt;

&lt;h6 id=&quot;ml-agents-201-버전에서는-과거의-train-load-같은-파라메터가-사라졌습니다&quot;&gt;ml-agents 2.0.1 버전에서는 과거의 –train –load 같은 파라메터가 사라졌습니다.&lt;/h6&gt;
&lt;h6 id=&quot;훈련하기-위해서는-그냥-run-id-만-입력하면-되고-이어하려면-resume-파라메터만-추가하면-됩니다&quot;&gt;훈련하기 위해서는 그냥 –run-id 만 입력하면 되고, 이어하려면 –resume 파라메터만 추가하면 됩니다.&lt;/h6&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;--run-id=&quot;훈련할이름&quot;
--resume(이어하기)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;INFO [environment.py:204] Listening on port 5004. Start training by pressing the Play button in the Unity Editor.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;이 메시지가 나오 후에 Unity에서 Play 버튼을 누르면 훈련을 시작하게 됩니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/mlagents/result.png&quot; style=&quot;margin-left: false; margin-right: auto; display: block;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;훈련 종료후 결과는 ./reusult/run-id 폴더에 생성됩니다.&lt;/p&gt;

&lt;p&gt;.onnx 파일을 agent 프리팹에서 변경한 후 플레이해서 정상적으로 훈련되었는지 확인해 봅니다.&lt;/p&gt;</content><author><name>YeonSeok Jo</name></author><category term="ml-agents" /><summary type="html">목차 1. ML-Agents 환경구성(Windows) 2. Play Tutorial 3. What should i do? 4.시작부터 결론??</summary></entry><entry><title type="html">3. What should I do?</title><link href="https://jyseok85.github.io/What!" rel="alternate" type="text/html" title="3. What should I do?" /><published>2022-10-24T09:00:00+00:00</published><updated>2022-10-24T09:00:00+00:00</updated><id>https://jyseok85.github.io/What!</id><content type="html" xml:base="https://jyseok85.github.io/What!">&lt;p&gt;&lt;span class=&quot;table-of-contents-list&quot;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;ul class=&quot;table-fo-contents-list&quot;&gt;
    &lt;b&gt;목차&lt;/b&gt;
    &lt;li&gt;&lt;a href=&quot;./Configuration&quot;&gt; 1. ML-Agents 환경구성(Windows)&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;./PlayTutorial&quot;&gt; 2. Play Tutorial&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;./What!&quot;&gt; 3. What should i do?&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;./Conculation&quot;&gt; 4.시작부터 결론??&lt;/a&gt;&lt;/li&gt;
    &lt;hr style=&quot;border: solid 1px rgb(134, 134, 134);&quot; /&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;자-그래서-턴제-알피지의-경우에-어떻게-구현하는걸까요&quot;&gt;자 그래서 턴제 알피지의 경우에 어떻게 구현하는걸까요??&lt;/h3&gt;

&lt;p&gt;저는 여기서 2년간 멍때렸습니다.&lt;/p&gt;

&lt;p&gt;기존에 테스트로 게임을 만들때 유한 상태 기계(finite-state machine, FSM)를 통하여 AI를 만들었습니다.&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;while&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;PlayerAction&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;foreach&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;GameObject&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;monster&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;monsterList&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;monster&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Action&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;//&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;상태에&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;따라&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;추적&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;이동&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;공격&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;대기&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;도망&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;등등&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;..&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;머신러닝을 하게 된다면 몬스터는 저 Action 상태에서 무엇을 할지 알수가 없습니다.&lt;/p&gt;

&lt;p&gt;우리가 해야할 것은 몬스터의 행동을 정의 할것이 아니라, 몬스터의 특정 행동에 대한 보상을 정의해야 합니다.&lt;/p&gt;

&lt;p&gt;(예를들어 에이전트(몬스터)가 플레이어에게 다가가면 점수를 얻는다. 플레이어를 공격하면 점수를 얻는다.)&lt;/p&gt;

&lt;p&gt;ex)&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;공격을 했는데 Player가 대미지를 받았다. 점수+&lt;/li&gt;
  &lt;li&gt;이동만 했을뿐인데 Player에게 대미지를 받았다 .점수-&lt;/li&gt;
  &lt;li&gt;공격했는데 Player에게 대미지를 너무 적게 주었다. 점수 조금+&lt;/li&gt;
  &lt;li&gt;공격했는데 Player에게 대미지를 많이 주었다. 점수 많이+&lt;/li&gt;
  &lt;li&gt;공격했는데 Player가 죽었다. 점수 100(만점)&lt;/li&gt;
  &lt;li&gt;고급 - 도망치는데 플레이어가 따라오다가 함정을 밟아서 대미지를 받았다. 점수+ (이경우 함정의 위치 및 종류에 대한 정보도 수집되어야 합니다.)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;정리&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;기존 : 현재 상태에 따른 몬스터의 액션을 구현&lt;/li&gt;
  &lt;li&gt;변경 : 행동 결과에 따른 몬스터의 보상을 추가&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;머신러닝을-한다고해서-코드-구현이-없거나-간단해지는것이-아닙니다-단지-일일히-행동을-정의하지-않아도-알아서-모든-케이스를-확인하고-점검한다는-것이-다를-뿐입니다&quot;&gt;머신러닝을 한다고해서 코드 구현이 없거나, 간단해지는것이 아닙니다. 단지 일일히 행동을 정의하지 않아도 알아서 모든 케이스를 확인하고, 점검한다는 것이 다를 뿐입니다.&lt;/h4&gt;
&lt;hr /&gt;

&lt;p&gt;MaxStep : 한 에피소드 내에서 무작위로 액션을 시도해보는 최대 횟수.
이 액션을 취한후에도 아무런 보상이 없다면 더이상 학습을 하지 않고 에피소드를 종료하고 다시 한다.
복잡한 환경일수록 MaxStep 를 크게 늘려야 한다.&lt;/p&gt;

&lt;p&gt;DecisionPeriod : 에이전트가 다음스텝을 진행하기전에 발생하는 FixedUpdated 수
기간을 늘리면 신경망에대한 평가가 줄어들어 속도가 빨라진다.
FixedUpdated 수 이기 대문에 cpu/gpu에 따라서 더 느리고 빠를 수 있다.&lt;/p&gt;</content><author><name>YeonSeok Jo</name></author><category term="ml-agents" /><summary type="html">목차 1. ML-Agents 환경구성(Windows) 2. Play Tutorial 3. What should i do? 4.시작부터 결론??</summary></entry></feed>