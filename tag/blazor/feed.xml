<?xml version="1.0" encoding="utf-8"?>

<feed xmlns="http://www.w3.org/2005/Atom" >
  <generator uri="https://jekyllrb.com/" version="3.9.0">Jekyll</generator>
  <link href="https://jyseok85.github.io/tag/blazor/feed.xml" rel="self" type="application/atom+xml" />
  <link href="https://jyseok85.github.io/" rel="alternate" type="text/html" />
  <updated>2023-04-18T02:07:50+00:00</updated>
  <id>https://jyseok85.github.io/tag/blazor/feed.xml</id>

  
  
  

  
    <title type="html">Dev-History | </title>
  

  
    <subtitle>지식을 잃어버리지 않게 기록하기 위한 블로그</subtitle>
  

  

  
    
      
    
  

  
  

  
    <entry>
      <title type="html">.Net5 -&amp;gt; .Net7 Migration</title>
      <link href="https://jyseok85.github.io/Net7Migration" rel="alternate" type="text/html" title=".Net5 -&gt; .Net7 Migration" />
      <published>2022-11-17T11:00:00+00:00</published>
      <updated>2022-11-17T11:00:00+00:00</updated>
      <id>https://jyseok85.github.io/Net7Migration</id>
      <content type="html" xml:base="https://jyseok85.github.io/Net7Migration">&lt;p&gt;특별히 변경된 사항은 거의 없습니다. 
App.razor의 초반 선언이 조금 바뀌고, 단순 Loading 텍스트대신 프로그래스바가 추가되었습니다. 
.Net5에서 프로젝트 속성에서 단순히 .Net7으로 변경하기만 하면 동작됩니다.&lt;/p&gt;

&lt;p&gt;단순 프레임워크만 올랐는데 속도도 빨라졌습니다.&lt;/p&gt;

&lt;p&gt;5에서 6까지 1초 걸리던게 0.8초
6에서 7까지 0.8초 걸리던게 0.6초&lt;/p&gt;

&lt;p&gt;한번에 2단계를 건너뛰었기 때문에 거의 2배 빨라졌다고 보는게 좋습니다. 
거의 서버와 동일한 속도까지 빨라졌습니다.(서버의 경우 매페이지 다운로드 해야기 때문에 
실제 계산은 빨라도 다운로드가 완료되는 시간이 포함되어서 엇 비슷합니다.)&lt;/p&gt;

&lt;p&gt;그런데 말입니다. 
.net6 부터 AOT 가 나왔습니다. 물론 저는 6를 건너뛰었고, 원래 첫버전은 망작이라서 시도도 안해봤었는데
이걸 사용하니까 속도가 거의 윈도우 클라이언트속도가 나옵니다.. WASM이요..&lt;/p&gt;

&lt;p&gt;단점은 다운받아야 하는 프레임워크가 3배이상 뻥튀기 됩니다. 기존에 30메가 중반대였는데
AOT로 빌드하니 100메가이상이 됩니다.&lt;/p&gt;

&lt;p&gt;물론 웹브라우저는 캐싱이 되니까 두번째 접속시에는 1~2메가 정도만 다운받습니다.&lt;/p&gt;

&lt;p&gt;단점은 사파리에서 지원이 안됩니다.. 
솔직히 IOS에서 인쇄 안되는 문제로 개발한건데.. 사파리가 아직이라니.&lt;/p&gt;</content>

      
      
      
      
      

      <author>
          <name>YeonSeok Jo</name>
        
        
      </author>

      

      
        <category term="blazor" />
      

      
        <summary type="html">특별히 변경된 사항은 거의 없습니다. App.razor의 초반 선언이 조금 바뀌고, 단순 Loading 텍스트대신 프로그래스바가 추가되었습니다. .Net5에서 프로젝트 속성에서 단순히 .Net7으로 변경하기만 하면 동작됩니다.</summary>
      

      
      
    </entry>
  
    <entry>
      <title type="html">Report WebViewer</title>
      <link href="https://jyseok85.github.io/WebViewer" rel="alternate" type="text/html" title="Report WebViewer" />
      <published>2022-11-03T09:00:00+00:00</published>
      <updated>2022-11-03T09:00:00+00:00</updated>
      <id>https://jyseok85.github.io/WebViewer</id>
      <content type="html" xml:base="https://jyseok85.github.io/WebViewer">&lt;p&gt;ERP가 웹으로 전환함에 있어서 ReportViewer또한 웹으로 표시해야 할 필요성이 생겼습니다.
(물론 꽤 오래전부터 이슈가 되었지만, 기술의 한계로 인하여 중단되었습니다.)&lt;/p&gt;

&lt;p&gt;기존 윈도우 클라이언트 버전에서 Web으로 전환하는데 여러 프레임워크를 테스트 했었습니다.
HTML5 Canvas, TypeScript, Unity, Blazor&lt;/p&gt;

&lt;p&gt;HTML5 Canvas의 경우 가장 기본이 되는 표준 프레임워크라서 제일먼저 시도했지만 
Canvas Drawing 의 경우 폰트에 따라서 글자에 깍두기 현상이 일어나서 기각되었습니다.&lt;/p&gt;

&lt;p&gt;그래서 TypeScript 로 구조를 잡고나서 실제 개발을 1~2달 정도 진행했을때 문제가 발견되었습니다. 기존 프로그램에는 동적으로 C# 코드를 실행을 해서 데이터를 후처리 하는 기능이 있는데 (JInt)TypeScript로는 불가능했습니다. JavaScript 정도만 실행가능하고, 실제 커스텀하게 만든 C#은 실행할 방법이 없었습니다.&lt;/p&gt;

&lt;p&gt;그 문제를 해결하기 위해 .Net 환경으로 해결할수 밖에 없었습니다. 
(기존 서식의 호환성을 포기할수가 없었기 때문에..)&lt;/p&gt;

&lt;p&gt;과거에 Unity로 UI를 만들던것을 경험삼아서 Unity로 한달정도 프로토타입을 만들어봤지만, 실제 인쇄를 하기 위해서 서버가 필요했기 때문에 이것도 기각되었습니다.&lt;/p&gt;

&lt;p&gt;그러던중 Blazor라는 것을 알게되었고, JInt 테스트를 해본결과 버전이 달라서 약간 지원되는 기능의 차이는 있었지만 허용범위내여서 이걸로 결정하고 개발을 진행했습니다.&lt;/p&gt;

&lt;p&gt;당시 개발 버전은 .Net Core3.1&lt;/p&gt;

&lt;p&gt;그리고 2020년 말에 .Net 5가 릴리즈 되고나서 마이그레이션을 했습니다.&lt;/p&gt;

&lt;p&gt;거의 90%정도의 호환성 유지하며 윈도우 프로그램에서 전환을 했지만 큰 문제가 있었습니다.&lt;/p&gt;

&lt;p&gt;WASM의 경우 너무 느려서 사용할수 없었습니다.
실제 렌더링하기 위해 데이터를 가공하는 시간도 느리긴했지만 가장 큰 문제는 .Net의 오브젝트를 렌더링 하기 위해 JavaScript로 변환하는 과정(Json전달)이 .Net Core3.1 버전 기준으로 1메가당 1초가 걸렸습니다.&lt;/p&gt;

&lt;p&gt;평범한 단순 표 서식의 경우 100kb 이내로 생성되지만 복잡한 법정서식의 경우 1메가이상되기 때문입니다.&lt;/p&gt;

&lt;p&gt;물론 1~2장은 아무 문제가 되지 않지만, ERP 시스템을 대상으로 하기 때문에 수백장을 한번에 출력할 경우를 생각해야 했습니다. 
500장 생각하면 데이터 넘기는데만 500초..가 걸립니다.&lt;/p&gt;

&lt;p&gt;물론 이건 프레임워크 버전이 업그레이드 됨에 따라서 점점 속도가 빨라졌습니다. 
(체감상 매 버전별 20%정도의 성능이 향상되는걸로 느껴졌습니다.)
().Net7 이 릴리즈 됨에 있어서 다시 프로젝트를 개선해야되겠다고 느낀게 이점 때문입니다. )&lt;/p&gt;

&lt;p&gt;그럼 결국 서버 모델로 가야했습니다.&lt;/p&gt;

&lt;p&gt;서버의 경우 기존 클라이언트 프로그램과 거의 차이가 없을 정도의 속도로 표현이 가능했습니다. 
단지 모든 계산이 서버에서 이뤄지기 때문에 수십, 수백명이 동시에 대량의 데이터를 출력할것을 예상해서 실제 업체에 구축되는 서버와 별개의 서버구축이 필요했습니다.&lt;/p&gt;

&lt;p&gt;서버 4대를 로드밸런싱 구성하고, 동시 접속 테스트 결과 몇십 몇백만이 호출되어도 WebViewer 서버의 경우는 느려지기만 하고 정상동작을 했습니다. 문제는 ERP서버가 너무 많은 API요청을 처리하지 못했습니다.&lt;/p&gt;

&lt;p&gt;안정성까지 확보를 했지만, 실제 업체에 서버한대가 더 추가된다는것에 대한 부담감? + URL 프로토콜을 사용하여 윈도우 버전으로 실행가능하기 때문에 2년간 구축한 사례는 없습니다.&lt;/p&gt;</content>

      
      
      
      
      

      <author>
          <name>YeonSeok Jo</name>
        
        
      </author>

      

      
        <category term="blazor" />
      

      
        <summary type="html">ERP가 웹으로 전환함에 있어서 ReportViewer또한 웹으로 표시해야 할 필요성이 생겼습니다. (물론 꽤 오래전부터 이슈가 되었지만, 기술의 한계로 인하여 중단되었습니다.)</summary>
      

      
      
    </entry>
  
</feed>
