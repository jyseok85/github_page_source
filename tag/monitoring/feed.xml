<?xml version="1.0" encoding="utf-8"?>

<feed xmlns="http://www.w3.org/2005/Atom" >
  <generator uri="https://jekyllrb.com/" version="3.9.0">Jekyll</generator>
  <link href="https://jyseok85.github.io/tag/monitoring/feed.xml" rel="self" type="application/atom+xml" />
  <link href="https://jyseok85.github.io/" rel="alternate" type="text/html" />
  <updated>2023-04-18T02:07:50+00:00</updated>
  <id>https://jyseok85.github.io/tag/monitoring/feed.xml</id>

  
  
  

  
    <title type="html">Dev-History | </title>
  

  
    <subtitle>지식을 잃어버리지 않게 기록하기 위한 블로그</subtitle>
  

  

  
    
      
    
  

  
  

  
    <entry>
      <title type="html">1. 템포, 그라파나, 프로메테우스 설치하기</title>
      <link href="https://jyseok85.github.io/tempo-grafana-promethues" rel="alternate" type="text/html" title="1. 템포, 그라파나, 프로메테우스 설치하기" />
      <published>2023-04-14T09:00:00+00:00</published>
      <updated>2023-04-14T09:00:00+00:00</updated>
      <id>https://jyseok85.github.io/tempo-grafana-promethues</id>
      <content type="html" xml:base="https://jyseok85.github.io/tempo-grafana-promethues">&lt;p&gt;&lt;span class=&quot;table-of-contents-list&quot;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;ul class=&quot;table-fo-contents-list&quot;&gt;
    &lt;b&gt;목차&lt;/b&gt;
    &lt;!-- href 링크는 날짜를 제외한 파일명과 매칭됨 --&gt;
    &lt;!-- ex) 파일명이 2023-04-13-grafana.md -&gt; &lt;a href=&quot;./grafana&quot;&gt;  --&gt;
    &lt;li&gt;&lt;a href=&quot;./tempo-grafana-promethues&quot;&gt; 1. 템포, 그라파나, 프로메테우스 설치하기&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;./openTelemetry-tempo-net&quot;&gt; 2. DotNet에서 OpenTelemetry를 이용한 템포 전송 프로젝트 생성&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;./tempo-test&quot;&gt; 3. Tempo 전송 테스트&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;./openTelemetry-tempo-springboot&quot;&gt; 4. Java(springboot) 환경에서 Tempo 전송&lt;/a&gt;&lt;/li&gt;
    &lt;hr style=&quot;border: solid 1px rgb(134, 134, 134);&quot; /&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;템포-그라파나-프로메테우스-설치하기&quot;&gt;템포, 그라파나, 프로메테우스 설치하기&lt;/h2&gt;
&lt;hr /&gt;
&lt;p&gt;템포 구성 샘플소스 : https://github.com/grafana/tempo.git&lt;/p&gt;
&lt;blockquote&gt;
  &lt;ul&gt;
    &lt;li&gt;&lt;a href=&quot;https://github.com/grafana/tempo/blob/main/example/docker-compose/local/docker-compose.yaml&quot;&gt;docker-compose.yaml&lt;/a&gt;&lt;br /&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;https://github.com/grafana/tempo/blob/main/example/docker-compose/shared/grafana-datasources.yaml&quot;&gt;grafana.yaml&lt;/a&gt;&lt;br /&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;https://github.com/grafana/tempo/blob/main/example/docker-compose/shared/prometheus.yaml&quot;&gt;prometheus.yaml&lt;/a&gt;&lt;br /&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;https://github.com/grafana/tempo/blob/main/example/docker-compose/shared/tempo.yaml&quot;&gt;tempo.yaml&lt;/a&gt;&lt;/li&gt;
  &lt;/ul&gt;
&lt;/blockquote&gt;

&lt;p&gt;위 샘플은 도커 컴포즈를 통해서 그라파나, 프로메테우스, 템포를 설치합니다.&lt;/p&gt;

&lt;p&gt;위 깃을 받고 그대로 사용할수 있지만,&lt;/p&gt;

&lt;p&gt;딱 필요한 파일만 사용하고 싶다면 아래의 docker-compose.yaml 내용을 복사하고 아래처럼 폴더구조를 생성하여 작업합니다.(상대경로의 변경과 k6 모듈만 제거되었습니다.)&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;├─docker-compose.yaml
├─shared
│   ├─ grafana-datasources.yaml
│   ├─ prometheus.yaml
│   └─ tempo.yaml
└─ tempo-data
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;hr /&gt;
&lt;summary&gt;docker-compose.yaml&lt;/summary&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;version: &quot;3&quot;
services:

  tempo:
    image: grafana/tempo:latest                     #다운받을 이지미
    container_name : tempo                          #생성될 컨테이너 이름
    command: [ &quot;-config.file=/etc/tempo.yaml&quot; ]
    volumes:                                        #볼륨 지정
      - ./shared/tempo.yaml:/etc/tempo.yaml
      - ./tempo-data:/tmp/tempo
    ports:                                          #포트 지정
      - &quot;14268:14268&quot;  # jaeger ingest
      - &quot;3200:3200&quot;   # tempo
      - &quot;4317:4317&quot;  # otlp grpc                    #이전에 만든 닷넷 서버와 통신
      - &quot;4318:4318&quot;  # otlp http
      - &quot;9411:9411&quot;   # zipkin

  prometheus:
    image: prom/prometheus:latest
    container_name : tempo_prometheus
    command:
      - --config.file=/etc/prometheus.yaml
      - --web.enable-remote-write-receiver
      - --enable-feature=exemplar-storage
    volumes:
      - ./shared/prometheus.yaml:/etc/prometheus.yaml
    ports:
      - &quot;9090:9090&quot;

  grafana:
    image: grafana/grafana:9.4.3
    container_name: tempo_grafana
    volumes:
      - ./shared/grafana-datasources.yaml:/etc/grafana/provisioning/datasources/datasources.yaml
    environment:
      - GF_AUTH_ANONYMOUS_ENABLED=true
      - GF_AUTH_ANONYMOUS_ORG_ROLE=Admin
      - GF_AUTH_DISABLE_LOGIN_FORM=true
      - GF_FEATURE_TOGGLES_ENABLE=traceqlEditor
    ports:
      - &quot;3000:3000&quot;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;hr /&gt;
&lt;summary&gt;각 제품별 yaml 파일(원본이 변경될것을 대비해서)&lt;/summary&gt;

&lt;ul&gt;
  &lt;li&gt;grafana-datasource.yaml&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;apiVersion: 1

datasources:
- name: Prometheus
  type: prometheus
  uid: prometheus
  access: proxy
  orgId: 1
  url: http://prometheus:9090
  basicAuth: false
  isDefault: false
  version: 1
  editable: false
  jsonData:
    httpMethod: GET
- name: Tempo
  type: tempo
  access: proxy
  orgId: 1
  url: http://tempo:3200
  basicAuth: false
  isDefault: true
  version: 1
  editable: false
  apiVersion: 1
  uid: tempo
  jsonData:
    httpMethod: GET
    serviceMap:
      datasourceUid: prometheus
      
traces:
  configs:
    - name: default
      service_graphs:
        enabled: true
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;prometheus.yaml&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;global:
  scrape_interval:     15s
  evaluation_interval: 15s

scrape_configs:
  - job_name: 'prometheus'
    static_configs:
      - targets: [ 'localhost:9090' ]
  - job_name: 'tempo'
    static_configs:
      - targets: [ 'tempo:3200' ]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;tempo.yaml&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;server:
  http_listen_port: 3200

distributor:
  receivers:                           # this configuration will listen on all ports and protocols that tempo is capable of.
    jaeger:                            # the receives all come from the OpenTelemetry collector.  more configuration information can
      protocols:                       # be found there: https://github.com/open-telemetry/opentelemetry-collector/tree/main/receiver
        thrift_http:                   #
        grpc:                          # for a production deployment you should only enable the receivers you need!
        thrift_binary:
        thrift_compact:
    zipkin:
    otlp:
      protocols:
        http:
        grpc:
    opencensus:

ingester:
  max_block_duration: 5m               # cut the headblock when this much time passes.
compactor:
  compaction:
    block_retention: 1h                # overall Tempo trace retention. set for demo purposes

metrics_generator:
  registry:
    external_labels:
      source: tempo
      cluster: docker-compose
  storage:
    path: /tmp/tempo/generator/wal
    remote_write:
      - url: http://prometheus:9090/api/v1/write
        send_exemplars: true

storage:
  trace:
    backend: local                     # backend configuration to use
    wal:
      path: /tmp/tempo/wal             # where to store the the wal locally
    local:
      path: /tmp/tempo/blocks

overrides:
  metrics_generator_processors: [service-graphs, span-metrics] # enables metrics generator
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Command 창에서 해당 경로로 이동 후 docker-compose up -d 명령으로 컨테이너들을 실행합니다.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;docker-compose up -d

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;Images/K-003.png&quot; alt=&quot;Alt text&quot; /&gt;&lt;/p&gt;

&lt;p&gt;도커 데스크탑에 아래와 같이 3개의  컨테이너가 실행됩니다. 
&lt;img src=&quot;Images/K-004.png&quot; alt=&quot;Alt text&quot; /&gt;&lt;/p&gt;

&lt;p&gt;닷넷 프로젝트를 컨테이너로 포함시키지 않은 이유&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;Swagger가 개발모드에서만 동작됩니다. 물론 환경변수를 Development로 주면 실행이 됩니다.(ASPNETCORE_ENVIRONMENT=Development)&lt;/li&gt;
  &lt;li&gt;테스트로 작성할 코드가 서버내부에서 내부 api를 호출하는데, 호출 위치가 컨테이너 내부라서 네트워크 연결하기가 번거롭습니다. (외부 경로나 다른 컨테이너를 호출하면 상관없습니다.)&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;이 두가지 이유로 닷넷 서버는 로컬에서 실행시켰습니다.&lt;/p&gt;</content>

      
      
      
      
      

      <author>
          <name>YeonSeok Jo</name>
        
        
      </author>

      

      
        <category term="monitoring" />
      

      
        <summary type="html">목차 1. 템포, 그라파나, 프로메테우스 설치하기 2. DotNet에서 OpenTelemetry를 이용한 템포 전송 프로젝트 생성 3. Tempo 전송 테스트 4. Java(springboot) 환경에서 Tempo 전송</summary>
      

      
      
    </entry>
  
</feed>
